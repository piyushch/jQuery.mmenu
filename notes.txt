Upgrading JBoss EAP 7.4 running on JDK 8 to JBoss EAP 8 with JDK 17 requires careful planning, as JBoss EAP 8 introduces Jakarta EE 10 and requires JDK 11+ (in your case, JDK 17). Below is a step-by-step guide to perform the upgrade while considering vault and security realms.

1. Pre-Upgrade Preparations

1.1. Check Compatibility
	•	JBoss EAP 8 requires JDK 11+ (JDK 17 is supported).
	•	JBoss EAP 8 moves to Jakarta EE 10, which means package names change (javax.* → jakarta.*).
	•	Check deprecated and removed features in JBoss EAP 8 Migration Guide.

1.2. Backup Everything
	•	Backup the current JBoss EAP 7.4 installation (standalone or domain directory).
	•	Backup configuration files (standalone.xml, domain.xml, standalone-full.xml).
	•	Backup application code and database.
	•	Take note of security settings (vault, security realms, LDAP, SSL).

2. Install JBoss EAP 8 & JDK 17

2.1. Install JDK 17
	•	Download and install JDK 17.
	•	Set JAVA_HOME:

export JAVA_HOME=/path/to/jdk17
export PATH=$JAVA_HOME/bin:$PATH



2.2. Install JBoss EAP 8
	•	Download and extract JBoss EAP 8 from the Red Hat Customer Portal.
	•	Set up environment variables:

export JBOSS_HOME=/path/to/jboss-eap-8

3. Migrate Configuration

JBoss EAP 8 has some changes in security, vault, and configuration.

3.1. Migrate Vault to Elytron Credential Store
	•	Vault is deprecated in JBoss EAP 8.
	•	Migrate from Vault to Elytron Credential Store:
	•	First, convert the existing vault:

$JBOSS_HOME/bin/elytron-tool.sh vault --enc-dir=<VAULT_LOCATION> --keystore-password=<VAULT_PASSWORD> --output-location=<CREDENTIAL_STORE_PATH>


	•	Update standalone.xml or domain.xml to replace vault references with credential-store.

3.2. Migrate Security Realms
	•	JBoss EAP 8 prefers Elytron Security over legacy security realms.
	•	If using ApplicationRealm or ManagementRealm, convert them to Elytron by following:
	•	Map legacy security realms to Elytron subsystems.
	•	Example migration command:

$JBOSS_HOME/bin/elytron-tool.sh migrate --source-config=standalone.xml --target-config=standalone-migrated.xml


	•	Update standalone.xml to use Elytron authentication.

3.3. Update Other Configurations
	•	Update datasource settings if needed.
	•	Update logging configurations (standalone.xml → elytron-log if applicable).
	•	Update CLI scripts if used for automation.

4. Upgrade Application Code
	•	If your application relies on Java EE (javax.) APIs, refactor it to Jakarta EE (jakarta.).
	•	If using Spring, ensure it supports JDK 17.
	•	If using Hibernate, update to the latest Jakarta Persistence version.
	•	Check for deprecated APIs in your application.

5. Deploy & Test

5.1. Start JBoss EAP 8

$JBOSS_HOME/bin/standalone.sh -c standalone.xml

or

$JBOSS_HOME/bin/domain.sh

5.2. Verify Logs
	•	Check server.log for errors.
	•	Validate that datasources, security realms, and credential stores are working.

5.3. Run Application Tests
	•	Deploy the application.
	•	Test authentication, authorization, database connections, and overall functionality.

6. Post-Migration Steps
	•	Optimize performance using JDK 17-specific tuning.
	•	Update monitoring scripts/tools to work with JBoss 8.
	•	Document changes for future maintenance.

Summary

Step	Action
1. Pre-Upgrade	Check compatibility, backup configurations
2. Install JBoss 8 & JDK 17	Install JDK  download and configure JBoss EAP 8
3. Migrate Configuration	Convert Vault to Elytron, migrate security realms, update standalone.xml
4. Upgrade Application	Migrate javax.* to jakarta.*, ensure dependencies are JDK 17 compatible
5. Deploy & Test	Start server, verify logs, run application tests
6. Post-Migration	Optimize performance, update documentation

Would you like help with specific migration issues, such as automating the process or debugging application errors?





=======

Below is an updated, more detailed checklist for upgrading from JBoss EAP 7.4 on JDK 8 to JBoss EAP 8 on JDK 17. In addition to the previous steps, the following points have been added or expanded for clarity and to cover potential gaps.

1. Pre-Upgrade Preparations
	•	Review Compatibility & Documentation
	•	Confirm that your target JBoss EAP 8 supports JDK 17 and Jakarta EE 10 (with the associated package name changes from javax.* to jakarta.*).
	•	Read the JBoss EAP 8 Migration Guide to understand changes in subsystems and configuration nuances.
	•	Inventory Customizations
	•	List any custom modules, third-party integrations, CLI scripts, and modifications made to subsystem configurations (e.g., messaging, transactions, clustering).
	•	Identify any custom login modules or other security customizations that might require rewriting when switching from legacy security realms to Elytron.
	•	Backup & Environment Setup
	•	Backup the complete JBoss 7.4 installation—including configuration files (standalone.xml, domain.xml, etc.), custom modules, and deployment scripts.
	•	Prepare a dedicated test or staging environment to trial the upgrade before production.

2. Install JDK 17 and JBoss EAP 8
	•	Install JDK 17
	•	Download and install JDK 17.
	•	Update environment variables (e.g., JAVA_HOME and PATH) to point to the new JDK.
	•	Install JBoss EAP 8
	•	Download and extract the JBoss EAP 8 distribution from the Red Hat Customer Portal.
	•	Set or update the JBOSS_HOME environment variable.
	•	Review JVM Options & OS-Level Dependencies
	•	Check any JVM options or operating system configurations (such as GC tuning or memory settings) that may need adjustment when moving from JDK 8 to JDK 17.

3. Migrate Configuration
	•	Subsystem Differences & Configuration Files
	•	Compare the default configuration files in EAP 8 with your existing 7.4 files. Many subsystems (e.g., datasources, transactions, JMS, logging) may have updates or new options.
	•	Use the migration tool provided by Red Hat (if available) to help translate configuration differences. For example:

$JBOSS_HOME/bin/elytron-tool.sh migrate --source-config=standalone.xml --target-config=standalone-migrated.xml


	•	Migrate Vault to Elytron Credential Store
	•	Since Vault is deprecated, convert your existing vault configuration to the Elytron Credential Store.
	•	Example conversion command:

$JBOSS_HOME/bin/elytron-tool.sh vault --enc-dir=<VAULT_LOCATION> --keystore-password=<VAULT_PASSWORD> --output-location=<CREDENTIAL_STORE_PATH>


	•	Update your configuration files to replace vault references with the new Elytron configuration.

	•	Migrate Legacy Security Realms to Elytron
	•	Transition legacy security realms (e.g., ApplicationRealm, ManagementRealm) to Elytron-based authentication.
	•	Review custom login modules or security domain settings that may require rewriting for Elytron compatibility.
	•	Update Other Integrations
	•	If you use external services (like LDAP, custom logging frameworks, or JMS brokers), verify that their configurations and integrations are updated according to EAP 8’s subsystems.
	•	Validate any clustering, high-availability, or load-balancing settings if applicable.

4. Upgrade Application Code & Dependencies
	•	Migrate from Java EE to Jakarta EE
	•	Update your code from javax.* to jakarta.*. This may involve refactoring imports, updating annotations, and ensuring all dependent libraries are Jakarta EE–compatible.
	•	Review Third-Party Dependencies
	•	Update Maven/Gradle dependencies for frameworks like Hibernate, Spring, or any other libraries to versions compatible with JDK 17 and Jakarta EE 10.
	•	Refactor Custom Modules
	•	If you maintain custom modules (or extensions) for JBoss, adjust them to the new APIs and configuration paradigms in EAP 8.
	•	Run Static Analysis & Tests
	•	Perform thorough code reviews and run automated tests to ensure that API changes (and potential deprecations) do not break functionality.

5. Deploy & Test
	•	Initial Server Startup
	•	Launch JBoss EAP 8 using the updated configuration:

$JBOSS_HOME/bin/standalone.sh -c standalone.xml

or, if in a domain mode:

$JBOSS_HOME/bin/domain.sh


	•	Monitor Server Logs & Health
	•	Review server logs (server.log) for any configuration errors, security warnings, or subsystem issues.
	•	Ensure that datasources, messaging, and security realms (now Elytron) are operating as expected.
	•	Comprehensive Testing
	•	Deploy your applications and run both functional and integration tests.
	•	Test authentication and authorization flows, database connectivity, and any external service integrations.
	•	Consider performance and load testing to ensure that tuning adjustments are effective under JDK 17.

6. Post-Migration Tasks
	•	Fine-Tune Performance & Security
	•	Optimize JVM options for JDK 17 and tune server performance settings.
	•	Update any monitoring tools or scripts to accommodate changes in JBoss EAP 8.
	•	Documentation & Rollback Plan
	•	Document all configuration changes, migration steps, and any code refactoring for future reference.
	•	Keep a rollback plan in case issues arise in the production environment.
	•	Update CI/CD & Automation Scripts
	•	Modify build, deployment, and automation scripts (including CLI commands) to match the new configuration and subsystems.
	•	Final Verification
	•	After a successful upgrade in a staging environment, perform a final verification in production—ensuring that all integrations, user authentications, and application functionalities work seamlessly.

Summary Checklist

Step	Key Actions
1. Pre-Upgrade	Check compatibility, review migration documentation, inventory custom modules/configurations, and back up all data.
2. Install	Install JDK 17, install JBoss EAP 8, update environment variables, and review JVM/OS-level configurations.
3. Configuration	Compare and update configuration files, migrate from Vault to Elytron Credential Store, convert legacy security realms to Elytron, and update integrations.
4. Code Upgrade	Refactor application code for Jakarta EE (javax → jakarta), update dependencies, adjust custom modules, and run tests.
5. Deploy & Test	Start the server, monitor logs, validate all subsystems, run functional/integration tests, and perform load/performance testing.
6. Post-Migration	Fine-tune performance, update automation scripts, document changes, and verify a successful upgrade in production with a rollback plan ready if needed.

By rechecking the steps, the following items have been emphasized or added:
	•	Inventory and review of customizations (custom modules, CLI scripts, integrations)
	•	Detailed comparison of default configuration files (to spot any subsystem differences)
	•	Review of JVM and OS-level settings that may need updating with JDK 17
	•	Thorough testing steps (including performance/load testing and integration testing)
	•	Updating CI/CD pipelines and automation scripts to reflect the new server configuration
	•	Final verification and a robust rollback plan before production deployment

This comprehensive checklist should help ensure that no critical element is overlooked during the upgrade. Would you like further details on any specific section or guidance on using migration tools?
