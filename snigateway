Here's a thinking process that leads to the detailed guide for implementing SNI with Mutual TLS (mTLS) on a Spring Cloud Zuul Gateway:

Understand the Core Problem: The user has an existing Spring Boot application acting as a Zuul API Gateway (likely Zuul 1, given the mention of Eureka in the same service, which is less common with modern Spring Cloud Gateway). This gateway currently handles HTTPS, likely with a single server certificate and potentially Mutual TLS (mTLS / two-way SSL). The requirement is to:
Implement SNI: Serve different server certificates based on the requested hostname (abc.com vs. xyz.com).
Maintain mTLS: Continue requiring and validating client certificates for authentication/authorization.
Identify Key Technologies:
Spring Boot
Spring Cloud Zuul 1 (Assumed based on context)
Embedded Web Server (Likely Tomcat, the default)
TLS/SSL, SNI, Mutual TLS (mTLS / Client Authentication)
Recall How Spring Boot Handles SSL/mTLS (Default):
server.ssl.* properties in application.properties/yml.
server.ssl.key-store: Server's private key and certificate.
server.ssl.trust-store: CAs used to validate client certificates (for mTLS).
server.ssl.client-auth=NEED or WANT: Enables mTLS.
Recall How SNI Works: SNI allows the server to see the requested hostname before presenting its certificate. This requires configuration at the TLS termination point.
Challenge: Spring Boot's Default SSL Limitations: The standard server.ssl.* properties do not support multiple server certificates for SNI. They configure a single SSL context for the primary HTTPS connector.
Solution: Programmatic Configuration: Just like the previous SNI-only scenario, the solution lies in bypassing the default configuration and programmatically configuring the embedded web server (Tomcat) using WebServerFactoryCustomizer.
Adding mTLS to the Programmatic Configuration: How does Tomcat handle mTLS alongside SNI?
Tomcat's <Connector> element handles the main port listening and protocol.
SSLHostConfig elements within the <Connector> handle SNI (different certificates per hostname).
mTLS (client authentication) settings are also configured within each SSLHostConfig. This means mTLS can potentially be configured per hostname if needed, or more commonly, applied consistently across all hostnames served by that connector. Key attributes within SSLHostConfig for mTLS are:
truststoreFile, truststorePassword, truststoreType: Specifies the truststore containing CAs that signed the allowed client certificates.
certificateVerification (or older clientAuth attribute on Connector): Set to required (equivalent to NEED) or optional (equivalent to WANT).
Structuring the Implementation Steps: Break down the process logically:
Prerequisites: What's needed before starting? (JDK, Build tool, Zuul project, Certs: Server A, Server B, Client CA).
Project Setup: Verify Zuul dependencies (important for Zuul 1 vs. Spring Cloud Gateway).
Certificate Preparation: Emphasize three types: Server certs (abc, xyz) and the Truststore for validating clients. Place them correctly.
Configuration Class (SniMtlsTomcatConfiguration):
Use @Configuration, @Bean.
Inject properties for all certs/stores and hostnames. Use @Value.
Implement WebServerFactoryCustomizer<TomcatServletWebServerFactory>.
Inside the customizer:
Disable default SSL (server.ssl.enabled=false).
Create a new Connector for HTTPS (port 443).
Get the Http11NioProtocol handler.
Enable SSL (protocol.setSSLEnabled(true)).
For each hostname (abc.com, xyz.com):
Create an SSLHostConfig.
Set hostName.
Configure server certificate (certificateKeystoreFile, etc.).
Configure client authentication settings (truststoreFile, truststorePassword, certificateVerification="required"). These mTLS settings will likely be the same for both hostnames, pointing to the same truststore.
Add the SSLHostConfig to the protocol.
Default Host Config: Add a _default_ SSLHostConfig, likely mirroring one of the named hosts' configurations (including mTLS). Mark it as default.
Add the configured Connector to the factory.
Include error handling (e.g., FileNotFoundException).
Application Properties: Define all necessary properties clearly (server.ssl.enabled=false, paths, passwords, hostnames, client auth settings). Use distinct property names (e.g., server.sni.mtls.truststore.path).
Zuul Configuration: Remind the user that existing Zuul routes (zuul.routes.*) remain unchanged â€“ the SNI/mTLS layer is purely at the transport level before requests hit Zuul's routing logic.
Build & Run: Standard mvn package / java -jar.
Testing (Crucial for mTLS):
Explain host file editing.
Show curl commands, emphasizing the new parameters needed for mTLS:
--cert: Client certificate file.
--key: Client private key file.
--cacert (Optional but good practice): CA cert for server verification (if server certs are not signed by a public CA known to curl).
Demonstrate testing both hostnames (abc.com, xyz.com).
Demonstrate testing without a client cert to ensure mTLS blocks the connection.
Deployment: Similar considerations as before (process management, Docker, secrets).
Refine and Elaborate:
Add clear comments in the code.
Explain why server.ssl.enabled=false is critical.
Distinguish clearly between server keystores and the client truststore.
Use descriptive property names.
Emphasize the testing steps, especially the mTLS-specific curl flags.
Mention the alternative (Spring Cloud Gateway + Netty) briefly if the user might migrate later.
Add disclaimers about Zuul 1 being in maintenance mode.
Review and Self-Critique: Does the guide flow logically? Is the code correct conceptually? Are the property names consistent? Is the testing section comprehensive enough for SNI and mTLS? Is the distinction between server certs and truststore clear? Have I addressed all parts of the user's request? Yes, seems reasonably complete.
